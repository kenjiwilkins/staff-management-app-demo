[{"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\index.js":"1","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\App.js":"2","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\reportWebVitals.js":"3","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\pages\\LandingPage.js":"4","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\pages\\ManagementPage.js":"5","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\UserList.js":"6","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\FinishWork.js":"7","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\LandingMessage.js":"8","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\StartWork.js":"9","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\LoginForm.js":"10","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\UsersTab.js":"11","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\ShiftsTab.js":"12","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\ManageTab.js":"13","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\ManagerAvatar.js":"14","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\UserAvatar.js":"15","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\helper\\timer.js":"16","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\helper\\utils.js":"17","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\pages\\LangingLogin.js":"18","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\actions\\index.js":"19","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\store.js":"20","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\reducers\\index.js":"21"},{"size":738,"mtime":1625370270016,"results":"22","hashOfConfig":"23"},{"size":1900,"mtime":1625377443865,"results":"24","hashOfConfig":"23"},{"size":375,"mtime":1612243534550,"results":"25","hashOfConfig":"23"},{"size":4767,"mtime":1625102271547,"results":"26","hashOfConfig":"23"},{"size":2025,"mtime":1625376565648,"results":"27","hashOfConfig":"23"},{"size":2754,"mtime":1619706725219,"results":"28","hashOfConfig":"23"},{"size":3142,"mtime":1625103749966,"results":"29","hashOfConfig":"23"},{"size":1491,"mtime":1624845390419,"results":"30","hashOfConfig":"23"},{"size":3632,"mtime":1625102756484,"results":"31","hashOfConfig":"23"},{"size":1604,"mtime":1613304947837,"results":"32","hashOfConfig":"23"},{"size":8552,"mtime":1625104444548,"results":"33","hashOfConfig":"23"},{"size":9271,"mtime":1625104214808,"results":"34","hashOfConfig":"23"},{"size":6161,"mtime":1625122334123,"results":"35","hashOfConfig":"23"},{"size":544,"mtime":1612330770141,"results":"36","hashOfConfig":"23"},{"size":503,"mtime":1612330679976,"results":"37","hashOfConfig":"23"},{"size":2305,"mtime":1625103689495,"results":"38","hashOfConfig":"23"},{"size":142,"mtime":1625101989969,"results":"39","hashOfConfig":"23"},{"size":3379,"mtime":1625375932329,"results":"40","hashOfConfig":"23"},{"size":249,"mtime":1625369300484,"results":"41","hashOfConfig":"23"},{"size":653,"mtime":1625369121999,"results":"42","hashOfConfig":"23"},{"size":1355,"mtime":1625370838775,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o26ht",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\index.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\App.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\reportWebVitals.js",[],["93","94"],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\pages\\LandingPage.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\pages\\ManagementPage.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\UserList.js",["95","96","97"],"import React from 'react'\r\nimport { LinearProgress, List, ListItem, ListItemText, Typography } from '@material-ui/core'\r\nimport { makeStyles, withStyles } from '@material-ui/styles'\r\nimport UserAvatar from './UserAvatar'\r\nimport SupervisorAvatar from './ManagerAvatar'\r\n\r\nconst GreenLinearProgress = withStyles({\r\n  colorPrimary:{\r\n    backgroundColor:\"#004225\"\r\n  },\r\n  barColorPrimary:{\r\n    backgroundColor:\"#DFFFF1\"\r\n  }\r\n})(LinearProgress)\r\n\r\nconst useStyles = makeStyles({\r\n  drawer:{\r\n    width:\"20%\"\r\n  }\r\n})\r\n\r\nconst UserList = props => {\r\n  const classes = useStyles()\r\n  return(\r\n    <div>\r\n      {props.users.length > 0 ? \r\n      <List>\r\n        <ListItem>\r\n          <Typography variant=\"caption\">\r\n            Manager\r\n          </Typography>\r\n        </ListItem>\r\n        {props.users.map((user, index) => {\r\n          if(user.isManager){\r\n            return user._id === props.selectedUserId ? \r\n            <ListItem key={index} selected button onClick={() => props.handleSelectedUser(user._id)}>\r\n              <SupervisorAvatar isWorking={user.isWorking} />\r\n              <ListItemText primary={`${user.firstName}`}/>\r\n            </ListItem> :\r\n            <ListItem key={index} button onClick={() => props.handleSelectedUser(user._id)}>\r\n              <SupervisorAvatar isWorking={user.isWorking} />\r\n              <ListItemText primary={`${user.firstName}`}/>\r\n            </ListItem>\r\n          }\r\n        })}\r\n        <ListItem>\r\n          <Typography variant=\"caption\">\r\n            Staff\r\n          </Typography>\r\n        </ListItem>\r\n        {props.users.map((user, index) => {\r\n          if(!user.isManager){\r\n          return user._id === props.selectedUserId ?\r\n          <ListItem key={index} selected button onClick={() => props.handleSelectedUser(user._id)}>\r\n            <UserAvatar isWorking={user.isWorking} />\r\n            <ListItemText\r\n              primary={`${user.firstName}`}\r\n            />\r\n          </ListItem> :\r\n          <ListItem key={index} button onClick={() => props.handleSelectedUser(user._id)}>\r\n            <UserAvatar isWorking={user.isWorking} />\r\n            <ListItemText\r\n              primary={`${user.firstName}`}\r\n            />\r\n          </ListItem>}\r\n          })}\r\n          {props.selectedUserId !== \"0\" &&\r\n          <ListItem button onClick={() => props.handleSelectedUser(\"0\")}>\r\n            <Typography variant=\"caption\">\r\n              Logout\r\n            </Typography>\r\n          </ListItem>}\r\n          <ListItem button onClick={() => props.getUserData()}>\r\n            <Typography variant=\"caption\">\r\n              Reload\r\n            </Typography>\r\n          </ListItem>\r\n      </List>:\r\n      <GreenLinearProgress />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserList","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\FinishWork.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\LandingMessage.js",["98"],"import React from 'react'\r\nimport {Grid, Typography} from '@material-ui/core'\r\nimport {makeStyles} from '@material-ui/styles'\r\nimport logo from '../app-logo.png'\r\n\r\nconst useStyles = makeStyles({\r\n  container:{\r\n    paddingTop:'50%'\r\n  },\r\n  textContainer:{\r\n    display:\"inline-block\",\r\n    width:'60%',\r\n    textAlign:\"left\",\r\n    paddingTop:'1em',\r\n    paddingLeft: '1em'\r\n  },\r\n  image:{\r\n    display:'inline-block',\r\n    verticalAlign:'top',\r\n    width:'30%',\r\n  }\r\n})\r\n\r\nconst LandingMessage = props => {\r\n  const classes = useStyles()\r\n  return(\r\n    <div className={classes.root}>\r\n      <Grid container spacing={0} justify=\"center\">\r\n        <Grid item xs={6}>\r\n          <div className={classes.container}>\r\n            <img src={logo} alt=\"logo\" className={classes.image}/>\r\n            <div className={classes.textContainer}>\r\n              <Typography variant=\"h5\">\r\n                Currently Working:\r\n              </Typography>\r\n              <Grid container spacing={3}>\r\n                {props.users.map((user, index) => {\r\n                  if(user.isWorking){\r\n                    return <Grid item xs={4} key={index}>\r\n                        <Typography variant=\"h6\">\r\n                          {user.firstName}\r\n                        </Typography>\r\n                      </Grid>\r\n                  }\r\n                })}\r\n              </Grid>\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LandingMessage","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\StartWork.js",["99","100"],"import React, {useState} from 'react'\r\nimport { Button, Dialog, DialogContent, DialogTitle, Typography, LinearProgress, CircularProgress } from '@material-ui/core'\r\nimport { makeStyles, withStyles } from '@material-ui/styles'\r\nimport { getStartTime, formatTime, getTotalHoursOfTheWeek } from '../helper/timer'\r\n\r\nconst GreenLinearProgress = withStyles({\r\n  colorPrimary:{\r\n    backgroundColor:\"#004225\"\r\n  },\r\n  barColorPrimary:{\r\n    backgroundColor:\"#DFFFF1\"\r\n  }\r\n})(LinearProgress)\r\n\r\nconst useStyles = makeStyles({\r\n  root:{\r\n    marginTop:\"20%\",\r\n    marginButton:\"20%\"\r\n  },\r\n  typography:{\r\n    paddingTop:\"1em\",\r\n    paddingBottom:\"1em\"\r\n  },\r\n  button:{\r\n    width:\"12em\",\r\n    height:\"4em\"\r\n  },\r\n  dialogTitle:{\r\n    paddingTop: \"3em\",\r\n    paddingLeft:\"3em\",\r\n    paddingRight:\"3em\"\r\n  },\r\n  dialogContent:{\r\n    paddingBottom: \"3em\",\r\n    paddingLeft:\"3em\",\r\n    paddingRight:\"3em\"\r\n  },\r\n  progressBar:{\r\n    paddingTop:\"8px\",\r\n    right:\"24px\"\r\n  }\r\n})\r\n\r\nconst StartWork = props => {\r\n  const classes = useStyles()\r\n  const [open, setOpen] = useState(false)\r\n  const [waiting, setWaiting] = useState(false)\r\n  const startShiftClicked = () => {\r\n    setOpen(false)\r\n    setWaiting(true)\r\n    props.startShift(props.selectedUser._id)\r\n  }\r\n  return(\r\n    <div>\r\n      <div className={classes.root}>\r\n        {waiting && <CircularProgress />}\r\n        {props.selectedUser &&\r\n        <div>\r\n          <Typography variant=\"h6\" className={classes.typography}>\r\n            {`${props.selectedUser.firstName} `}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" className={classes.typography}>\r\n            {`Total working hours this week: ${props.selectedUserInfos.totalHours}h`}\r\n          </Typography>\r\n          <Button \r\n            variant=\"contained\" \r\n            size=\"large\" \r\n            color=\"primary\" \r\n            onClick={() => setOpen(true)}\r\n            className={classes.button}>\r\n              Start\r\n          </Button>\r\n          <Typography variant=\"subtitle1\" className={classes.typography}>\r\n            {`So far, you have worked ${props.selectedUserShifts.length ? props.selectedUserShifts.length : '0'}\r\n            shift this week`}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">\r\n            {`Weekdays: ${props.selectedUserInfos.totalWeeklyHours}h including overwork: ${props.selectedUserInfos.totalOverworkHours}h`}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">\r\n            {`Saturday: ${props.selectedUserInfos.totalSaturdayHours}h`}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\">\r\n            {`Sunday: ${props.selectedUserInfos.totalSundayHours}h`}\r\n          </Typography>\r\n          <Dialog open={open} onClose={() => setOpen(false)}>\r\n            <DialogTitle className={classes.dialogTitle}>\r\n              <Typography variant=\"h5\">\r\n                {`Start work ${props.selectedUser.firstName}?`}\r\n              </Typography>\r\n            </DialogTitle>\r\n            <DialogContent className={classes.dialogContent}>\r\n              <Typography variant=\"h6\" className={classes.typography}>starting time：{formatTime(getStartTime())}</Typography>\r\n              {waiting ?\r\n              <Button className={classes.button} variant=\"contained\" color=\"primary\" disabled>start</Button> :\r\n              <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => startShiftClicked()}>\r\n                start\r\n              </Button>}\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StartWork","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\LoginForm.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\UsersTab.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\ShiftsTab.js",["101","102"],"import React, {useEffect, useState} from 'react'\r\nimport { \r\n  Button, Table, TableHead, TableBody, TableRow, TableCell, Snackbar, Typography,\r\n  Dialog, DialogTitle, DialogContent, DialogActions, Grid\r\n} from '@material-ui/core'\r\nimport { MuiPickersUtilsProvider, DateTimePicker, DatePicker } from '@material-ui/pickers'\r\nimport datefnsutils from '@date-io/date-fns'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport axios from 'axios'\r\nimport { formatTime, clockHandler } from '../helper/timer'\r\nimport { URL } from '../helper/utils'\r\n\r\nconst useStyles = makeStyles({\r\n  table:{\r\n    maxWidth:\"95%\"\r\n  },\r\n  cancelButton:{\r\n    color:\"white\",\r\n    backgroundColor:\"orange\"\r\n  },\r\n  deleteButton:{\r\n    color:\"white\",\r\n    backgroundColor:\"red\",\r\n    right: \"40em\"\r\n  },\r\n  updateButton:{\r\n    color:\"white\",\r\n    backgroundColor:\"green\"\r\n  },\r\n  timePickerGrid:{\r\n    padding:\"3em\"\r\n  }\r\n})\r\n\r\nconst ShiftsTab = props => {\r\n  const classes = useStyles()\r\n  const [shifts, setShifts] = useState([])\r\n  const [newStartTime, setNewStartTime] = useState(new Date)\r\n  const [newEndTime, setNewEndTime] = useState(new Date)\r\n  const [shiftDate, setShiftDate] = useState(undefined)\r\n  const [popupOpen, setPopupOpen] = useState(false)\r\n  const [severity, setSeverity] = useState(\"success\")\r\n  const [message, setMessage] = useState(\"\")\r\n\r\n  const [dialogOpen, setDialogOpen] = useState(false)\r\n  const [selectedShift, setSelectedShift] = useState(undefined)\r\n\r\n  const handleNewStartTime = date => {\r\n    setNewStartTime(clockHandler(date))\r\n  }\r\n  const handleNewEndTime = date => {\r\n    setNewEndTime(clockHandler(date))\r\n  }\r\n\r\n  const handleShiftDate = date => {\r\n    setShiftDate(date)\r\n  }\r\n\r\n  const updateButtonClicked = shiftId => {\r\n    setDialogOpen(false)\r\n    setSelectedShift(undefined)\r\n    updateShift(shiftId)\r\n  }\r\n\r\n  const deleteButtonClicked = shiftId => {\r\n    setDialogOpen(false)\r\n    setSelectedShift(undefined)\r\n    deleteShift(shiftId)\r\n  }\r\n\r\n  function approveAll(){\r\n    axios.post(`${URL()}/api/manage/approveall`,{}, {withCredentials:true}).then(res => {\r\n      getShifts()\r\n    })\r\n  }\r\n\r\n  const updateShift = async shiftId => {\r\n    const newShift = {\r\n      startTime: newStartTime,\r\n      endTime: newEndTime\r\n    }\r\n    await axios.post(`${URL()}/api/manage/updateShift/${shiftId}`, {newShift: newShift}, {withCredentials:true}).then(res => {\r\n      if(res.status === 200){\r\n        setMessage(res.data.message)\r\n        setSeverity(\"success\")\r\n      } else {\r\n        setMessage(\"something went wrong\")\r\n        setSeverity(\"error\")\r\n      }\r\n      if(shiftDate){\r\n        getSelectDateShifts()\r\n      } else {\r\n        getShifts()\r\n      }\r\n    })\r\n  }\r\n\r\n  const deleteShift = async shiftId => {\r\n    await axios.post(`${URL()}/api/manage/deleteShift/${shiftId}`, {}, {withCredentials:true}).then(res => {\r\n      if(shiftDate){\r\n        getSelectDateShifts()\r\n      } else {\r\n        getShifts()\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleSnackBar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setPopupOpen(false);\r\n  }\r\n\r\n  const editShiftClicked = shift => {\r\n    setSelectedShift(shift)\r\n    setNewStartTime(shift.startTime)\r\n    setNewEndTime(shift.endTime)\r\n    setDialogOpen(true)\r\n  }\r\n\r\n  const resetClicked = () => {\r\n    setShiftDate(undefined)\r\n    getShifts()\r\n  }\r\n\r\n  useEffect(() => {\r\n    getShifts()\r\n  }, [])\r\n  const getShifts = () => {\r\n    axios.get(`${URL()}/api/manage/shifts/all`, {withCredentials:true}).then(res => {\r\n      setShifts(res.data.shifts)\r\n    }).catch(err => {\r\n      console.log(err)\r\n    })\r\n  }\r\n  const getSelectDateShifts = () => {\r\n    if(shiftDate){\r\n      axios.get(`${URL()}/api/manage/shifts/date/${shiftDate}`, {withCredentials:true}).then(res => {\r\n        setShifts(res.data.shifts)\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    }\r\n  }\r\n\r\n  const approveShift = shiftId => {\r\n    axios.post(`${URL()}/api/manage/approve/${shiftId}`, {}, {withCredentials:true}).then(res => {\r\n      if(res.status === 200){\r\n        setMessage(res.data.message)\r\n        setSeverity(\"success\")\r\n        getShifts()\r\n      } else {\r\n        setMessage(\"something went wrong!\")\r\n        setSeverity(\"error\")\r\n        getShifts()\r\n      }\r\n    })\r\n  }\r\n  return(\r\n    <div>\r\n      <Snackbar open={popupOpen} autoHideDuration={3000} onClose={handleSnackBar}\r\n        anchorOrigin={{vertical:'top', horizontal:'center'}}\r\n      >\r\n        {severity === \"success\" &&\r\n          <Alert elevation={6} severity=\"success\">\r\n            {message}\r\n          </Alert>\r\n        }\r\n        {severity === \"error\" &&\r\n          <Alert elevation={6} severity=\"error\">\r\n            {message}\r\n          </Alert>\r\n        }\r\n      </Snackbar>\r\n      {selectedShift &&\r\n        <Dialog fullWidth maxWidth=\"lg\" open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n          <DialogTitle >\r\n            <Typography variant=\"h4\" component=\"h2\">\r\n              {`Change shift details of ${selectedShift.firstName} `}\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              {`from ${formatTime(selectedShift.startTime)} to ${formatTime(selectedShift.endTime)} (worked ${selectedShift.totalHours}h)`}\r\n            </Typography>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <MuiPickersUtilsProvider utils={datefnsutils}>\r\n              <Grid container spacing={3} justify=\"space-evenly\">\r\n                <Grid item xs={4}>\r\n                  <DateTimePicker\r\n                    label=\"change start time\"\r\n                    value={newStartTime}\r\n                    onChange={handleNewStartTime}\r\n                    format=\"MM/dd/yyyy HH:mm\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  <DateTimePicker\r\n                    label=\"change finish time\"\r\n                    value={newEndTime}\r\n                    onChange={handleNewEndTime}\r\n                    format=\"MM/dd/yyyy HH:mm\"\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </MuiPickersUtilsProvider>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button className={classes.deleteButton} variant=\"contained\" size=\"large\" onClick={() => deleteButtonClicked(selectedShift.id)}>Delete</Button>\r\n            <Button className={classes.cancelButton} variant=\"contained\" size=\"large\" onClick={() => setDialogOpen(false)}>Cancel</Button>\r\n            <Button className={classes.updateButton} variant=\"contained\" size=\"large\" onClick={() => updateButtonClicked(selectedShift.id)}>Update</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      }\r\n      <Grid className={classes.timePickerGrid} container spacing={3}>\r\n        <MuiPickersUtilsProvider utils={datefnsutils}>\r\n          <Grid item xs={4}>\r\n            <DatePicker\r\n              label=\"select date\"\r\n              value={shiftDate}\r\n              onChange={handleShiftDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => getSelectDateShifts()}>\r\n              Search\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Button variant=\"contained\" color=\"inherit\" onClick={() => resetClicked()}>\r\n              reset\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={() => approveAll()}>\r\n              approve all\r\n            </Button>\r\n          </Grid>\r\n        </MuiPickersUtilsProvider>\r\n      </Grid>\r\n      <Table className={classes.table}>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>staff name</TableCell>\r\n            <TableCell>start time</TableCell>\r\n            <TableCell>end time</TableCell>\r\n            <TableCell>total time</TableCell>\r\n            <TableCell>approved</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {shifts.length > 0 && \r\n            shifts.map((shift, index) => {\r\n              return (\r\n              <TableRow key={index}>\r\n                <TableCell>{`${shift.firstName}`}</TableCell>\r\n                <TableCell>{formatTime(shift.startTime)}</TableCell>\r\n                <TableCell>{formatTime(shift.endTime)}</TableCell>\r\n                <TableCell>{`${shift.totalHours}h`}</TableCell>\r\n                <TableCell>\r\n                  {shift.approved ?\r\n                    <Typography variant=\"subtitle2\" color=\"secondary\">\r\n                      approved\r\n                    </Typography>:\r\n                    <Button \r\n                      size=\"small\" \r\n                      variant=\"contained\" \r\n                      color=\"secondary\"\r\n                      onClick={() => approveShift(shift.id)}\r\n                    >approve</Button>\r\n                  }\r\n                  <Button size=\"small\" variant=\"outlined\" onClick={() => editShiftClicked(shift)}>\r\n                    edit?\r\n                  </Button>\r\n                </TableCell>\r\n              </TableRow>)\r\n            })\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShiftsTab","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\ManageTab.js",["103","104","105","106","107","108"],"import React, { useState } from 'react'\r\nimport { Button, Grid, List, ListItem, Divider, Typography, FormControl, TextField} from '@material-ui/core'\r\nimport { MuiPickersUtilsProvider, DatePicker, } from '@material-ui/pickers'\r\nimport datefnsutils from '@date-io/date-fns'\r\nimport axios from 'axios'\r\nimport moment from 'moment'\r\nimport { ExportToCsv } from \"export-to-csv\"\r\nimport DayPicker from 'react-day-picker';\r\nimport { URL } from '../helper/utils'\r\nimport 'react-day-picker/lib/style.css';\r\n\r\nconst ManageTab = props => {\r\n  const [date, setDate] = useState(moment().startOf('week').add(1, 'day'))\r\n  const [selectedDays, setSelectedDays] = useState([moment().startOf('week').add(1, 'day').toDate()])\r\n  const [hoverRange, setHoverRange] = useState()\r\n  const daysAreSelected = selectedDays.length > 0\r\n  const [currentPassword, setCurrentPassword] = useState(\"\")\r\n  const [newPassword, setNewPassword] = useState(\"\")\r\n  const [success, setSuccess] = useState(false)\r\n\r\n  const allShiftOptions = { \r\n    filename:`all_shifts_${moment(selectedDays[0]).format(\"DD/MM/YYYY\")}`,\r\n    fieldSeparator: ',',\r\n    quoteStrings: '\"',\r\n    decimalSeparator: '.',\r\n    showLabels: true, \r\n    showTitle: true,\r\n    title: `all_shifts_${moment(selectedDays[0]).format(\"DD/MM/YYYY\")}`,\r\n    useTextFile: false,\r\n    useBom: true,\r\n    useKeysAsHeaders: true,\r\n  };\r\n  const totalPerStaffOptions = { \r\n    filename:`total_per_staff_${moment(selectedDays[0]).format(\"DD/MM/YYYY\")}`,\r\n    fieldSeparator: ',',\r\n    quoteStrings: '\"',\r\n    decimalSeparator: '.',\r\n    showLabels: true, \r\n    showTitle: true,\r\n    title: `total_per_staff_${moment(selectedDays[0]).format(\"DD/MM/YYYY\")}`,\r\n    useTextFile: false,\r\n    useBom: true,\r\n    headers:['First Name', 'Total Hours', 'Weekday', 'Overwork', 'Monday', 'Tuesday', 'Wednesdayday', 'Thursday', 'Friday', 'Sataurday', 'Sunday']\r\n  };\r\n  const downloadAllShifts = async () => {\r\n    const dateparam = moment(date).format(\"YYYY-MM-DD\")\r\n    await axios.get(`${URL()}/api/manage/download/allShifts/${dateparam}`, {withCredentials:true}).then(res => {\r\n      const csvExporter = new ExportToCsv(allShiftOptions)\r\n      csvExporter.generateCsv(res.data.csvObjects)\r\n    })\r\n  }\r\n  const downloadPerUser = async () => {\r\n    const dateparam = moment(selectedDays[0]).format(\"YYYY-MM-DD\")\r\n    await axios.get(`${URL()}/api/manage/download/totalperuser/${dateparam}`, {withCredentials:true}).then(res => {\r\n      const csvExporter = new ExportToCsv(totalPerStaffOptions)\r\n      csvExporter.generateCsv(res.data.csvObjects)\r\n    })\r\n  }\r\n\r\n  function getWeekDays(weekStart) {\r\n    const days = [weekStart];\r\n    for (let i = 1; i < 7; i += 1) {\r\n      days.push(\r\n        moment(weekStart)\r\n          .add(i, 'days')\r\n          .toDate()\r\n      );\r\n    }\r\n    return days;\r\n  }\r\n\r\n  function getWeekRange(day) {\r\n    return {\r\n      from: moment(day)\r\n        .startOf('week').add(1, \"day\")\r\n        .toDate(),\r\n      to: moment(day)\r\n        .endOf('week').add(1, \"day\")\r\n        .toDate(),\r\n    };\r\n  }\r\n\r\n  function handleDayChange(day) {\r\n    setSelectedDays(\r\n      getWeekDays(getWeekRange(day).from)\r\n    )\r\n  };\r\n\r\n  const modifiers = {\r\n    hoverRange,\r\n    selectedRange: daysAreSelected && {\r\n      from: selectedDays[0],\r\n      to: selectedDays[6],\r\n    },\r\n    hoverRangeStart: hoverRange && hoverRange.from,\r\n    hoverRangeEnd: hoverRange && hoverRange.to,\r\n    selectedRangeStart: daysAreSelected && selectedDays[0],\r\n    selectedRangeEnd: daysAreSelected && selectedDays[6],\r\n  };\r\n\r\n  async function handleChangeAccessCodeClicked(){\r\n    setCurrentPassword(\"\")\r\n    setNewPassword(\"\")\r\n    await axios.post(`${URL()}/api/manage/landingPage`, {\r\n      currentPassword:currentPassword,\r\n      newPassword:newPassword\r\n    }, {withCredentials:true}).then(res => {\r\n      if(res){\r\n        setSuccess(true)\r\n      }\r\n    })\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <List>\r\n        <ListItem>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={6}>\r\n              {/* <MuiPickersUtilsProvider utils={datefnsutils}>\r\n                <DatePicker\r\n                  value={date}\r\n                  onChange={setDate}\r\n                  format=\"dd/MM/yyyy\"\r\n                  label=\"start day\"\r\n                />\r\n              </MuiPickersUtilsProvider> */}\r\n              <DayPicker\r\n                showWeekNumbers\r\n                firstDayOfWeek={1}\r\n                selectedDays={selectedDays}\r\n                modifiers={modifiers}\r\n                onDayClick={handleDayChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} container spacing={3}>\r\n              {/* <Grid item>\r\n                <Button variant=\"outlined\" onClick={() => downloadAllShifts()}>donwload All Shifts</Button>\r\n              </Grid> */}\r\n              <Grid item>\r\n                <Button variant=\"outlined\" onClick={() => downloadPerUser()}>download total hours</Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </ListItem>\r\n        <Divider />\r\n        <ListItem>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={6}>\r\n              \r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <FormControl>\r\n                <Typography variant=\"h6\">Change Access Code</Typography>\r\n                {success && <Typography variant=\"subtitle1\" color=\"secondary\">Success!</Typography>}\r\n                <TextField\r\n                  label=\"current password\"\r\n                  type=\"password\"\r\n                  value={currentPassword}\r\n                  onChange={e => setCurrentPassword(e.target.value)}\r\n                />\r\n                <TextField\r\n                  label=\"new password\"\r\n                  type=\"password\"\r\n                  value={newPassword}\r\n                  onChange={e => setNewPassword(e.target.value)}\r\n                />\r\n                <Button variant=\"outlined\" style={{marginTop:\"24px\"}} onClick={() => handleChangeAccessCodeClicked()}>Change</Button>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ManageTab","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\ManagerAvatar.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\components\\UserAvatar.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\helper\\timer.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\helper\\utils.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\pages\\LangingLogin.js",["109","110"],"import React, { Component, Fragment } from 'react'\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Button,\r\n  TextField,\r\n  CardHeader,\r\n  InputAdornment\r\n} from \"@material-ui/core\";\r\nimport { Send, Mail, Lock } from \"@material-ui/icons\";\r\n\r\nconst styles = theme => ({\r\n  card: {\r\n    marginTop: \"136px\",\r\n    minWidth: 275\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing.unit\r\n  },\r\n  action: {\r\n    flexDirection: \"row-reverse\"\r\n  }\r\n});\r\n\r\nexport default withStyles(styles)(\r\n  class LoginForm extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        password: \"\"\r\n      }\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleChange(password){\r\n      this.setState({\r\n        password:password\r\n      })\r\n    }\r\n\r\n    handleClick(){\r\n      this.setState({\r\n        password:\"\"\r\n      })\r\n      this.props.checkPassword(this.state.password)\r\n    }\r\n\r\n    render() {\r\n      const { classes } = this.props,\r\n        { email, password } = this.state;\r\n      return (\r\n        <Fragment>\r\n          <Container>\r\n            <Card className={classes.card}>\r\n              <CardHeader\r\n                title=\"Access\"\r\n              />\r\n              <CardContent>\r\n                {this.props.accessFail ?\r\n                  <TextField\r\n                    error\r\n                    required\r\n                    autoFocus\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    label=\"Access Denied\"\r\n                    value={password}\r\n                    onChange={e => this.handleChange(e.target.value)}\r\n                    margin=\"normal\"\r\n                    fullWidth\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <Lock />\r\n                        </InputAdornment>\r\n                      )\r\n                    }}\r\n                  />:\r\n                    <TextField\r\n                      required\r\n                      autoFocus\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      label=\"password\"\r\n                      value={password}\r\n                      onChange={e => this.handleChange(e.target.value)}\r\n                      margin=\"normal\"\r\n                      fullWidth\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <Lock />\r\n                          </InputAdornment>\r\n                        )\r\n                      }}\r\n                    />\r\n                  }\r\n              </CardContent>\r\n              <CardActions className={classes.action}>\r\n                <Button\r\n                  id=\"btn_login\"\r\n                  onClick={e => this.handleClick()}\r\n                  color=\"primary\"\r\n                  className={classes.button}\r\n                  variant=\"contained\">\r\n                  <Send className={classes.extendedIcon} />\r\n                  Access\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </Container>\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n);\r\n","C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\actions\\index.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\store.js",[],"C:\\Users\\kench\\OneDrive\\Documents\\wagaya-staff\\client\\src\\reducers\\index.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":23,"column":9,"nodeType":"117","messageId":"118","endLine":23,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":33,"column":40,"nodeType":"121","messageId":"122","endLine":33,"endColumn":42},{"ruleId":"119","severity":1,"message":"120","line":51,"column":40,"nodeType":"121","messageId":"122","endLine":51,"endColumn":42},{"ruleId":"119","severity":1,"message":"120","line":37,"column":48,"nodeType":"121","messageId":"122","endLine":37,"endColumn":50},{"ruleId":"115","severity":1,"message":"123","line":4,"column":36,"nodeType":"117","messageId":"118","endLine":4,"endColumn":58},{"ruleId":"115","severity":1,"message":"124","line":6,"column":7,"nodeType":"117","messageId":"118","endLine":6,"endColumn":26},{"ruleId":"125","severity":1,"message":"126","line":39,"column":52,"nodeType":"127","messageId":"128","endLine":39,"endColumn":60,"fix":"129"},{"ruleId":"125","severity":1,"message":"126","line":40,"column":48,"nodeType":"127","messageId":"128","endLine":40,"endColumn":56,"fix":"130"},{"ruleId":"115","severity":1,"message":"131","line":3,"column":10,"nodeType":"117","messageId":"118","endLine":3,"endColumn":33},{"ruleId":"115","severity":1,"message":"132","line":3,"column":35,"nodeType":"117","messageId":"118","endLine":3,"endColumn":45},{"ruleId":"115","severity":1,"message":"133","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":20},{"ruleId":"115","severity":1,"message":"134","line":13,"column":16,"nodeType":"117","messageId":"118","endLine":13,"endColumn":23},{"ruleId":"115","severity":1,"message":"135","line":15,"column":22,"nodeType":"117","messageId":"118","endLine":15,"endColumn":35},{"ruleId":"115","severity":1,"message":"136","line":45,"column":9,"nodeType":"117","messageId":"118","endLine":45,"endColumn":26},{"ruleId":"115","severity":1,"message":"137","line":13,"column":16,"nodeType":"117","messageId":"118","endLine":13,"endColumn":20},{"ruleId":"115","severity":1,"message":"138","line":54,"column":11,"nodeType":"117","messageId":"118","endLine":54,"endColumn":16},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'getTotalHoursOfTheWeek' is defined but never used.","'GreenLinearProgress' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"141","text":"142"},{"range":"143","text":"142"},"'MuiPickersUtilsProvider' is defined but never used.","'DatePicker' is defined but never used.","'datefnsutils' is defined but never used.","'setDate' is assigned a value but never used.","'setHoverRange' is assigned a value but never used.","'downloadAllShifts' is assigned a value but never used.","'Mail' is defined but never used.","'email' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[1112,1112],"()",[1170,1170]]